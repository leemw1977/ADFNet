name: Build & Publish NuGet Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'          # e.g. v1.0.0
      - 'preview-v*.*.*'  # e.g. preview-v1.0.0

jobs:
  versioning:
    name: 🏷 Generate build type and suffix
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.set-outputs.outputs.type }}
      version_suffix: ${{ steps.set-outputs.outputs.version_suffix }}
    steps:
      - name: Set release type and version suffix
        id: set-outputs
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" == v* ]]; then
            echo "type=production" >> $GITHUB_OUTPUT
            echo "version_suffix=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            # use the tag name as the suffix (e.g. preview-1.2.3)
            echo "type=preview" >> $GITHUB_OUTPUT
            echo "version_suffix=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            # fallback for branch builds — use a timestamp
            echo "type=preview" >> $GITHUB_OUTPUT
            echo "version_suffix=preview.$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
          fi
  
            
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore
        run: dotnet restore ADFNet.sln

      - name: Build
        run: make build

      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/bin/
            **/obj/

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Run tests
        run: make test

  package:
    name: 📦 Package NuGet
    runs-on: ubuntu-latest
    needs: [build, test, versioning]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Package
        run: |
          if [[ "${{ needs.versioning.outputs.type }}" == "production" ]]; then
            echo "🚀 Production release detected"
            make package-nobuild
          else
            echo "🔬 Preview build with suffix ${{ needs.versioning.outputs.version_suffix }}"
            make package-preview VERSION_SUFFIX=${{ needs.versioning.outputs.version_suffix }}
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: |
            nupkg/**/*.nupkg
            nupkg/**/*.symbols.nupkg

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [package, versioning]
    if: github.ref_type == 'tag'
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./nupkg

      - name: 🧹 Delete existing assets from release (if any)
        run: |
          TAG_NAME="${{ github.ref_name }}"
          gh release view "$TAG_NAME" --json assets -q '.assets[].name' |
          while read filename; do
            echo "Deleting asset: $filename"
            gh release delete-asset "$TAG_NAME" "$filename" -y
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: |
            nupkg/**/*.nupkg
            nupkg/**/*.symbols.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: 📤 Publish to NuGet
    runs-on: ubuntu-latest
    needs: [package, versioning]
    if: github.ref_type == 'tag'
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./nupkg
  
      - name: Push packages to NuGet
        run: |
          for pkg in nupkg/**/*.nupkg; do
            echo "Pushing $pkg..."
            dotnet nuget push "$pkg" \
              --api-key "${{ secrets.NUGET_API_KEY }}" \
              --source https://api.nuget.org/v3/index.json
          done
